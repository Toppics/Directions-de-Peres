# -*- coding: utf-8 -*-
"""
Created on Tue Nov 28 13:20:01 2023

@author: yan-s
"""

# On récupère la liste des 33 directions de Peres déterminées précédemment
directionsPeres = [
[1.0, 0.0, 1.0],
[1.0, 1.0, 0.0],
[1.0, -0.7071067811865476, -0.7071067811865476],
[1.0, 0.7071067811865476, -0.7071067811865476],
[1.0, -0.7071067811865476, 0.7071067811865476],
[1.0, 0.7071067811865476, 0.7071067811865476],
[1.0, -0.7071067811865475, 0.0],
[1.0, 0.7071067811865475, 0.0],
[1.0, 0.0, 0.0],
[1.0, 0.0, -0.7071067811865475],
[1.0, 0.0, 0.7071067811865475],
[-1.0, 0.0, 1.0],
[0.0, -1.0, 1.0],
[0.0, 1.0, 1.0],
[-0.7071067811865475, 0.0, 1.0],
[0.7071067811865475, 0.0, 1.0],
[0.0, 0.0, 1.0],
[0.0, -0.7071067811865475, 1.0],
[0.0, 0.7071067811865475, 1.0],
[-0.7071067811865476, -0.7071067811865476, 1.0],
[0.7071067811865476, -0.7071067811865476, 1.0],
[-0.7071067811865476, 0.7071067811865476, 1.0],
[0.7071067811865476, 0.7071067811865476, 1.0],
[-1.0, 1.0, 0.0],
[-0.7071067811865475, 1.0, 0.0],
[0.7071067811865475, 1.0, 0.0],
[0.0, 1.0, 0.0],
[-0.7071067811865476, 1.0, 0.7071067811865476],
[-0.7071067811865476, 1.0, -0.7071067811865476],
[0.7071067811865476, 1.0, 0.7071067811865476],
[0.7071067811865476, 1.0, -0.7071067811865476],
[0.0, 1.0, -0.7071067811865475],
[0.0, 1.0, 0.7071067811865475]]

# On récupère la liste des 16 triplets déterminées précédemment
triplets = [
[[1.0, 0.0, 1.0], [-1.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, 0.7071067811865476], [0.7071067811865476, 1.0, -0.7071067811865476]],
[[1.0, 1.0, 0.0], [0.0, 0.0, 1.0], [-1.0, 1.0, 0.0]],
[[1.0, 1.0, 0.0], [0.7071067811865476, -0.7071067811865476, 1.0], [-0.7071067811865476, 0.7071067811865476, 1.0]],
[[1.0, -0.7071067811865476, -0.7071067811865476], [1.0, 0.7071067811865476, 0.7071067811865476], [0.0, -1.0, 1.0]],
[[1.0, 0.7071067811865476, -0.7071067811865476], [1.0, -0.7071067811865476, 0.7071067811865476], [0.0, 1.0, 1.0]],
[[1.0, -0.7071067811865475, 0.0], [0.0, 0.0, 1.0], [0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.7071067811865475, 0.0], [0.0, 0.0, 1.0], [-0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.0, 0.0], [0.0, -1.0, 1.0], [0.0, 1.0, 1.0]],
[[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[1.0, 0.0, 0.0], [0.0, -0.7071067811865475, 1.0], [0.0, 1.0, 0.7071067811865475]],
[[1.0, 0.0, 0.0], [0.0, 0.7071067811865475, 1.0], [0.0, 1.0, -0.7071067811865475]],
[[1.0, 0.0, -0.7071067811865475], [0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[-1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, -0.7071067811865476], [0.7071067811865476, 1.0, 0.7071067811865476]],
[[-0.7071067811865476, -0.7071067811865476, 1.0], [0.7071067811865476, 0.7071067811865476, 1.0], [-1.0, 1.0, 0.0]]]

# On récupère la liste des 24 paires non déjà présentes dans triplets déterminées précédemment
paires = [
[[1.0, -0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 0.0, 1.0]],
[[1.0, -0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 0.0, 1.0]],
[[1.0, 0.7071067811865476, -0.7071067811865476], [-0.7071067811865475, 1.0, 0.0]],
[[1.0, -0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 0.0, 1.0]],
[[1.0, -0.7071067811865476, 0.7071067811865476], [0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 0.0, 1.0]],
[[1.0, 0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 1.0, 0.0]],
[[1.0, -0.7071067811865475, 0.0], [0.7071067811865476, 1.0, 0.7071067811865476]],
[[1.0, -0.7071067811865475, 0.0], [0.7071067811865476, 1.0, -0.7071067811865476]],
[[1.0, 0.7071067811865475, 0.0], [-0.7071067811865476, 1.0, 0.7071067811865476]],
[[1.0, 0.7071067811865475, 0.0], [-0.7071067811865476, 1.0, -0.7071067811865476]],
[[1.0, 0.0, -0.7071067811865475], [0.7071067811865476, -0.7071067811865476, 1.0]],
[[1.0, 0.0, -0.7071067811865475], [0.7071067811865476, 0.7071067811865476, 1.0]],
[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865476, -0.7071067811865476, 1.0]],
[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865476, 0.7071067811865476, 1.0]],
[[0.0, -0.7071067811865475, 1.0], [-0.7071067811865476, 1.0, 0.7071067811865476]],
[[0.0, -0.7071067811865475, 1.0], [0.7071067811865476, 1.0, 0.7071067811865476]],
[[0.0, 0.7071067811865475, 1.0], [-0.7071067811865476, 1.0, -0.7071067811865476]],
[[0.0, 0.7071067811865475, 1.0], [0.7071067811865476, 1.0, -0.7071067811865476]],
[[-0.7071067811865476, -0.7071067811865476, 1.0], [0.0, 1.0, 0.7071067811865475]],
[[0.7071067811865476, -0.7071067811865476, 1.0], [0.0, 1.0, 0.7071067811865475]],
[[-0.7071067811865476, 0.7071067811865476, 1.0], [0.0, 1.0, -0.7071067811865475]],
[[0.7071067811865476, 0.7071067811865476, 1.0], [0.0, 1.0, -0.7071067811865475]]]
from copy import deepcopy

def listAposition(lst: list, position: list):
    """Transforme liste coordonnées en liste position dans Peres"""
    l = deepcopy(lst)
    
    for idx, i in enumerate(lst):
        for iidx, ii in enumerate(i):
            for iiidx, iii in enumerate(position):
                if ii == iii:
                    l[idx][iidx] = iiidx
                    break
    return l

def binInt(n: int):
    """Renvoie un nombre n en binaire"""
    return [int(x) for x in bin(n)[2:]]

def add33Bits(l: list, n: int):
    """Renvoie list binaire sur n bits"""
    for i in range(n):
        if len(l) < n:
            l.insert(0,0)
    return l

## Créer listes triplets et paires correspondantes positions dans directions
tripletsPosition = listAposition(triplets, directionsPeres)
pairesPosition = listAposition(paires, directionsPeres)

# Variable d'arrêt
somme = 0
# Commence à 0
itr = 0
# Boucle tant que somme != 2 ou épuisées les 8 589 934 592 possibilitées (2^33)
while (somme != 2) and (itr <= (2**33)-1):
    itr +=1 # Pas la peine
    # Génére itr sur 33 bits
    lst33Bin = add33Bits(binInt(itr), 33)
    # Pour (d; d0; d00) l’un des 16 triplets orthogonaux de P
    for i in tripletsPosition:
        # Vérifie alors si (d) + (d0) + (d00) = 2
        if (lst33Bin[int(i[0])] + lst33Bin[int(i[1])] + lst33Bin[int(i[2])]) >=2:           
           # Vérifie si (d; d0) est l’une des 24 paires orthogonales de P non déjà présentes dans un triplet orthogonal
           if [i[0],i[1]] in pairesPosition:
               # Vérifie si alors ((d); (d0)) = (0; 0)
               if (lst33Bin[int(i[0])] + lst33Bin[int(i[1])]) == 0:
                   # Spoiler Alert: Jamais
                   print('Licorne !')
                   somme = 2
           else:
               # Arrêtes de chercher dans les triplets
               break

# Nota Bene: 10 it/s
