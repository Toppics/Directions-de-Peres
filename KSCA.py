# -*- coding: utf-8 -*-
"""
Created on Sun Nov 26 21:44:10 2023

@author: yan-s
"""

# On récupère la liste des 33 directions de Peres déterminées précédemment
directionsPeres = [
[1.0, 0.0, 1.0],
[1.0, 1.0, 0.0],
[1.0, -0.7071067811865476, -0.7071067811865476],
[1.0, 0.7071067811865476, -0.7071067811865476],
[1.0, -0.7071067811865476, 0.7071067811865476],
[1.0, 0.7071067811865476, 0.7071067811865476],
[1.0, -0.7071067811865475, 0.0],
[1.0, 0.7071067811865475, 0.0],
[1.0, 0.0, 0.0],
[1.0, 0.0, -0.7071067811865475],
[1.0, 0.0, 0.7071067811865475],
[-1.0, 0.0, 1.0],
[0.0, -1.0, 1.0],
[0.0, 1.0, 1.0],
[-0.7071067811865475, 0.0, 1.0],
[0.7071067811865475, 0.0, 1.0],
[0.0, 0.0, 1.0],
[0.0, -0.7071067811865475, 1.0],
[0.0, 0.7071067811865475, 1.0],
[-0.7071067811865476, -0.7071067811865476, 1.0],
[0.7071067811865476, -0.7071067811865476, 1.0],
[-0.7071067811865476, 0.7071067811865476, 1.0],
[0.7071067811865476, 0.7071067811865476, 1.0],
[-1.0, 1.0, 0.0],
[-0.7071067811865475, 1.0, 0.0],
[0.7071067811865475, 1.0, 0.0],
[0.0, 1.0, 0.0],
[-0.7071067811865476, 1.0, 0.7071067811865476],
[-0.7071067811865476, 1.0, -0.7071067811865476],
[0.7071067811865476, 1.0, 0.7071067811865476],
[0.7071067811865476, 1.0, -0.7071067811865476],
[0.0, 1.0, -0.7071067811865475],
[0.0, 1.0, 0.7071067811865475]]

# On récupère la liste des 16 triplets déterminées précédemment
triplets = [
[[1.0, 0.0, 1.0], [-1.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, 0.7071067811865476], [0.7071067811865476, 1.0, -0.7071067811865476]],
[[1.0, 1.0, 0.0], [0.0, 0.0, 1.0], [-1.0, 1.0, 0.0]],
[[1.0, 1.0, 0.0], [0.7071067811865476, -0.7071067811865476, 1.0], [-0.7071067811865476, 0.7071067811865476, 1.0]],
[[1.0, -0.7071067811865476, -0.7071067811865476], [1.0, 0.7071067811865476, 0.7071067811865476], [0.0, -1.0, 1.0]],
[[1.0, 0.7071067811865476, -0.7071067811865476], [1.0, -0.7071067811865476, 0.7071067811865476], [0.0, 1.0, 1.0]],
[[1.0, -0.7071067811865475, 0.0], [0.0, 0.0, 1.0], [0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.7071067811865475, 0.0], [0.0, 0.0, 1.0], [-0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.0, 0.0], [0.0, -1.0, 1.0], [0.0, 1.0, 1.0]],
[[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[1.0, 0.0, 0.0], [0.0, -0.7071067811865475, 1.0], [0.0, 1.0, 0.7071067811865475]],
[[1.0, 0.0, 0.0], [0.0, 0.7071067811865475, 1.0], [0.0, 1.0, -0.7071067811865475]],
[[1.0, 0.0, -0.7071067811865475], [0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[-1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, -0.7071067811865476], [0.7071067811865476, 1.0, 0.7071067811865476]],
[[-0.7071067811865476, -0.7071067811865476, 1.0], [0.7071067811865476, 0.7071067811865476, 1.0], [-1.0, 1.0, 0.0]]]

# On récupère la liste des 24 paires non déjà présentes dans triplets déterminées précédemment
paires = [
[[1.0, -0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 0.0, 1.0]],
[[1.0, -0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 0.0, 1.0]],
[[1.0, 0.7071067811865476, -0.7071067811865476], [-0.7071067811865475, 1.0, 0.0]],
[[1.0, -0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 0.0, 1.0]],
[[1.0, -0.7071067811865476, 0.7071067811865476], [0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 0.0, 1.0]],
[[1.0, 0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 1.0, 0.0]],
[[1.0, -0.7071067811865475, 0.0], [0.7071067811865476, 1.0, 0.7071067811865476]],
[[1.0, -0.7071067811865475, 0.0], [0.7071067811865476, 1.0, -0.7071067811865476]],
[[1.0, 0.7071067811865475, 0.0], [-0.7071067811865476, 1.0, 0.7071067811865476]],
[[1.0, 0.7071067811865475, 0.0], [-0.7071067811865476, 1.0, -0.7071067811865476]],
[[1.0, 0.0, -0.7071067811865475], [0.7071067811865476, -0.7071067811865476, 1.0]],
[[1.0, 0.0, -0.7071067811865475], [0.7071067811865476, 0.7071067811865476, 1.0]],
[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865476, -0.7071067811865476, 1.0]],
[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865476, 0.7071067811865476, 1.0]],
[[0.0, -0.7071067811865475, 1.0], [-0.7071067811865476, 1.0, 0.7071067811865476]],
[[0.0, -0.7071067811865475, 1.0], [0.7071067811865476, 1.0, 0.7071067811865476]],
[[0.0, 0.7071067811865475, 1.0], [-0.7071067811865476, 1.0, -0.7071067811865476]],
[[0.0, 0.7071067811865475, 1.0], [0.7071067811865476, 1.0, -0.7071067811865476]],
[[-0.7071067811865476, -0.7071067811865476, 1.0], [0.0, 1.0, 0.7071067811865475]],
[[0.7071067811865476, -0.7071067811865476, 1.0], [0.0, 1.0, 0.7071067811865475]],
[[-0.7071067811865476, 0.7071067811865476, 1.0], [0.0, 1.0, -0.7071067811865475]],
[[0.7071067811865476, 0.7071067811865476, 1.0], [0.0, 1.0, -0.7071067811865475]]]
from copy import deepcopy

def listAposition(lst: list, position: list):
    """Transforme liste coordonnées en liste position dans Peres"""
    l = deepcopy(lst)
    
    for idx, i in enumerate(lst):
        for iidx, ii in enumerate(i):
            for iiidx, iii in enumerate(position):
                if ii == iii:
                    l[idx][iidx] = iiidx
                    break
    return l

def binInt(n: int):
    """Renvoie un nombre n en binaire"""
    return [int(x) for x in bin(n)[2:]]

def addBits(l: list, n: int):
    """Renvoie list binaire sur n bits"""
    for i in range(n):
        if len(l) < n:
            l.insert(0,0)
    return l

## Créer listes triplets et paires correspondantes positions dans directions
tripletsPosition = listAposition(triplets, directionsPeres)
pairesPosition = listAposition(paires, directionsPeres)

def forceBrute(itr: int, n: int):
    # Boucle tant que somme != 33*2 ou épuisées les 8 589 934 592 possibilitées (2^33)
    while (itr != (2**n)-1):
        # Variables de suivie (similaire à commencer par n)
        sp = 0; st = 0; itr +=1
        # Génére itr en binaire sur n bits
        lstBin = addBits(binInt(itr), n)        
        # Pour (d; d0; d00) l’un des 16 triplets orthogonaux de P
        for i in tripletsPosition:
            # Vérifie alors si (d) + (d0) + (d00) = 2
            if (lstBin[int(i[0])] + lstBin[int(i[1])] + lstBin[int(i[2])]) == 2:
                # Permet de vérifier si les 16 triplets vérifient (i)
                st += 1
        # Si les 16 triplets valident la condition (i)
        if st == 16:
            print('Condition (i) validée !')
            # Vérifie si (d; d0) est l’une des 24 paires orthogonales de P non déjà présentes dans un triplet orthogonal
            for ii in pairesPosition:
                # Vérifie si ((d); (d0)) = (0; 0)
                if (lstBin[int(ii[0])], lstBin[int(ii[1])]) != (0,0):
                    # Permet de vérifier si les 24 paires vérifient (ii)
                    sp += 1
                    if sp == 24:
                        # Spoiler Alert: Jamais
                        print('Condition (ii) validée !')
                        return f'Licorne en {itr}'

# Avec 0+1 le nombre de départ, et 33 le nombre de bits                
print(forceBrute(0,33))
# Nota Bene: 10 it/s
