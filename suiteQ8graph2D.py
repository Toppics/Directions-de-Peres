# -*- coding: utf-8 -*-
"""
Created on Thu Dec  7 09:40:07 2023

@author: yan-s
"""

from copy import deepcopy
from matplotlib import rcParams
from itertools import combinations
import matplotlib.pyplot as plt
import networkx as nx

# On récupère la liste des 33 directions de Peres déterminées précédemment
directionsPeres = [
    [1.0, 0.0, 1.0],
    [1.0, 1.0, 0.0],
    [1.0, -0.7071067811865476, -0.7071067811865476],
    [1.0, 0.7071067811865476, -0.7071067811865476],
    [1.0, -0.7071067811865476, 0.7071067811865476],
    [1.0, 0.7071067811865476, 0.7071067811865476],
    [1.0, -0.7071067811865475, 0.0],
    [1.0, 0.7071067811865475, 0.0],
    [1.0, 0.0, 0.0],
    [1.0, 0.0, -0.7071067811865475],
    [1.0, 0.0, 0.7071067811865475],
    [-1.0, 0.0, 1.0],
    [0.0, -1.0, 1.0],
    [0.0, 1.0, 1.0],
    [-0.7071067811865475, 0.0, 1.0],
    [0.7071067811865475, 0.0, 1.0],
    [0.0, 0.0, 1.0],
    [0.0, -0.7071067811865475, 1.0],
    [0.0, 0.7071067811865475, 1.0],
    [-0.7071067811865476, -0.7071067811865476, 1.0],
    [0.7071067811865476, -0.7071067811865476, 1.0],
    [-0.7071067811865476, 0.7071067811865476, 1.0],
    [0.7071067811865476, 0.7071067811865476, 1.0],
    [-1.0, 1.0, 0.0],
    [-0.7071067811865475, 1.0, 0.0],
    [0.7071067811865475, 1.0, 0.0],
    [0.0, 1.0, 0.0],
    [-0.7071067811865476, 1.0, 0.7071067811865476],
    [-0.7071067811865476, 1.0, -0.7071067811865476],
    [0.7071067811865476, 1.0, 0.7071067811865476],
    [0.7071067811865476, 1.0, -0.7071067811865476],
    [0.0, 1.0, -0.7071067811865475],
    [0.0, 1.0, 0.7071067811865475]]

# On récupère la liste des 16 triplets déterminées précédemment
triplets = [
    [[1.0, 0.0, 1.0], [-1.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
    [[1.0, 0.0, 0.0], [0.0, -1.0, 1.0], [0.0, 1.0, 1.0]],
    [[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]],    
    [[1.0, -0.7071067811865475, 0.0], [0.0, 0.0, 1.0], [0.7071067811865475, 1.0, 0.0]],
    [[1.0, 0.7071067811865475, 0.0], [0.0, 0.0, 1.0], [-0.7071067811865475, 1.0, 0.0]],    
    [[1.0, 0.0, 0.0], [0.0, -0.7071067811865475, 1.0], [0.0, 1.0, 0.7071067811865475]],
    [[1.0, 0.0, 0.0], [0.0, 0.7071067811865475, 1.0], [0.0, 1.0, -0.7071067811865475]],
    [[1.0, 0.0, -0.7071067811865475], [0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],
    [[1.0, 0.0, 0.7071067811865475], [-0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],
    [[1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, 0.7071067811865476],[0.7071067811865476, 1.0, -0.7071067811865476]],
    [[1.0, 1.0, 0.0], [0.0, 0.0, 1.0], [-1.0, 1.0, 0.0]],[[1.0, 1.0, 0.0], [0.7071067811865476, -0.7071067811865476, 1.0], [-0.7071067811865476, 0.7071067811865476, 1.0]],
    [[1.0, -0.7071067811865476, -0.7071067811865476], [1.0, 0.7071067811865476, 0.7071067811865476], [0.0, -1.0, 1.0]],
    [[1.0, 0.7071067811865476, -0.7071067811865476], [1.0, -0.7071067811865476, 0.7071067811865476], [0.0, 1.0, 1.0]],
    [[-1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, -0.7071067811865476], [0.7071067811865476, 1.0, 0.7071067811865476]],
    [[-0.7071067811865476, -0.7071067811865476, 1.0], [0.7071067811865476, 0.7071067811865476, 1.0], [-1.0, 1.0, 0.0]]]

# On récupère la liste des 24 paires non déjà présentes dans triplets déterminées précédemment
paires = [
    [[1.0, -0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 0.0, 1.0]],
    [[1.0, -0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 1.0, 0.0]],
    [[1.0, 0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 0.0, 1.0]],
    [[1.0, 0.7071067811865476, -0.7071067811865476],[-0.7071067811865475, 1.0, 0.0]],
    [[1.0, -0.7071067811865476, 0.7071067811865476],[-0.7071067811865475, 0.0, 1.0]],
    [[1.0, -0.7071067811865476, 0.7071067811865476], [0.7071067811865475, 1.0, 0.0]],
    [[1.0, 0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 0.0, 1.0]],
    [[1.0, 0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 1.0, 0.0]],
    [[1.0, -0.7071067811865475, 0.0], [0.7071067811865476, 1.0, 0.7071067811865476]],
    [[1.0, -0.7071067811865475, 0.0], [0.7071067811865476, 1.0, -0.7071067811865476]],
    [[1.0, 0.7071067811865475, 0.0], [-0.7071067811865476, 1.0, 0.7071067811865476]],
    [[1.0, 0.7071067811865475, 0.0], [-0.7071067811865476, 1.0, -0.7071067811865476]],
    [[1.0, 0.0, -0.7071067811865475], [0.7071067811865476, -0.7071067811865476, 1.0]],
    [[1.0, 0.0, -0.7071067811865475], [0.7071067811865476, 0.7071067811865476, 1.0]],
    [[1.0, 0.0, 0.7071067811865475], [-0.7071067811865476, -0.7071067811865476, 1.0]],
    [[1.0, 0.0, 0.7071067811865475], [-0.7071067811865476, 0.7071067811865476, 1.0]],
    [[0.0, -0.7071067811865475, 1.0], [-0.7071067811865476, 1.0, 0.7071067811865476]],
    [[0.0, -0.7071067811865475, 1.0], [0.7071067811865476, 1.0, 0.7071067811865476]],
    [[0.0, 0.7071067811865475, 1.0], [-0.7071067811865476, 1.0, -0.7071067811865476]],
    [[0.0, 0.7071067811865475, 1.0], [0.7071067811865476, 1.0, -0.7071067811865476]],
    [[-0.7071067811865476, -0.7071067811865476, 1.0], [0.0, 1.0, 0.7071067811865475]],
    [[0.7071067811865476, -0.7071067811865476, 1.0], [0.0, 1.0, 0.7071067811865475]],
    [[-0.7071067811865476, 0.7071067811865476, 1.0],[0.0, 1.0, -0.7071067811865475]],
    [[0.7071067811865476, 0.7071067811865476, 1.0], [0.0, 1.0, -0.7071067811865475]]]


def listAposition(lst: list, position: list):
    """Transforme liste coordonnées en liste position dans Peres"""
    lstPosition = deepcopy(lst)

    for idx, i in enumerate(lst):
        for iidx, ii in enumerate(i):
            for iiidx, iii in enumerate(position):
                if ii == iii:
                    lstPosition[idx][iidx] = iiidx
                    break
    return lstPosition

# Créer listes triplets et paires correspondantes positions dans directions
tripletsPosition = listAposition(triplets, directionsPeres)
pairesPosition = listAposition(paires, directionsPeres)

# Forme les arêtes entre les noeuds
aretes = pairesPosition[:]
# dans arrete ssi app à paires ou app à triplets
for i in tripletsPosition:
    for ii, iii in combinations(i, 2):
        aretes.append([ii, iii])

# On créer le graphe
G = nx.Graph()
# On y rajoute chaque paire de noeuds
for i in aretes:
    G.add_edge(i[0], i[1])

# Option de traçage du graphe
options = {"font_size": 1, "node_size": 10, "node_color": "black",
           "linewidths": 1, "width": 0.5}
# On définit la position des noeuds
pos = nx.circular_layout(G)
# On trace le graphe
nx.draw_networkx(G, pos, **options)

# Définit taille figure
rcParams['figure.dpi'] = 100
rcParams['figure.figsize'] = (25, 25)
# Créer une figure du graph
ax = plt.gca()
ax.margins(0.20)
plt.title("Graphe")
plt.axis("off")
plt.show()

# Affiche si le graphe est planaire
print(nx.is_planar(G))
